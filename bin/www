#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../server');
var request = require('request');
var twitter = require('twitter');
var debug = require('debug')('tutorials:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.Server(app);
var io = require('socket.io')(server);
var users = [];

io.on('connection',function(socket) {
  var username = '';
  console.log("A user has connected");

  socket.on('request-users',function() {
    socket.emit('users',{users: users});
  });

  socket.on('message',function(data) {
    io.emit('message',{username:username, message: data.message});
  });

  socket.on('add-user',function(data) {

    if(users.indexOf(data.username) == -1) {
      io.emit('add-user', {
        username: data.username
      });

      username = data.username;
      users.push(data.username);
    }

    else {
      socket.emit('prompt-username', {
        message: 'User Already Exists'
      })
    }
  });

  socket.on('disconnect',function() {
    console.log(username + " has disconnected");
    users.splice(users.indexOf(username),1);
    io.emit('remove-user',{username: username});
  })
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var client = new twitter({
  consumer_key: '5D4vVnQd2XkghydvNFnj3uuaK',
  consumer_secret: 'EI2OIeD5lzUFaIfpoPXLHeQ7KhAUcuas6cklUvUTk9ZRhE8p6e',
  access_token_key: '3404042547-Qagc829o0rJlkgmvXR4KBXZSvb68kBsd7dVORjW',
  access_token_secret: 'KLFd5zKtml8BoesUpTYZBiNJMPnl72YiRgsgAQP9iitXI'
});

client.stream('statuses/filter',{track:'#brussels',language: 'en'}, function(stream) {
  stream.on('data',function(tweet) {
    io.emit('newTweet', tweet);
  });
  stream.on('error',function(error) {
    throw error;
  });

  stream.on('destroy', function (response) {
    // Handle a 'silent' disconnection from Twitter, no end/error event fired
    socket.emit('twitter-done');
  });

});


//mup.stream("/2/rsvps", function(stream){
//  stream.on("data", function(rsvp){
//        io.emit('newRsvp',rsvp);
//      });
//  stream.on("error", function(error) {
//        throw error;
//      });
//});




io.on('connection', function(socket) {
  console.log('a user has connected at home ');
  socket.on('disconnect', function() {
    console.log('user has disconnected at home');
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


